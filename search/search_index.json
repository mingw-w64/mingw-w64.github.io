{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#_1","title":"Introduction","text":"<p>Mingw-w64 is a collection of header files, import libraries, libraries and tools that, when combined with a compiler toolchain, such as GCC or LLVM, provides a complete development environment for building native Windows applications and libraries.</p> <p>Mingw-w64 is an advancement of the original mingw.org project, which was created to support the GCC compiler on Windows systems. It was forked in 2007 in order to provide 64-bit support and newer APIs. It has since then gained wide use and distribution.</p> <p>Headers and Libraries:</p> <ul> <li>More than a million lines of headers are provided, not counting generated ones,   and regularly expanded to track new Windows APIs.</li> <li>Everything needed for linking and running your code on Windows.</li> <li>Better-conforming and faster math support compared to VisualStudio's.</li> </ul> <p>Runtime Libraries:</p> <ul> <li>Winpthreads, a pthreads library for C++11 threading support and simple   integration with existing project.</li> <li>Winstorecompat, a work-in-progress convenience library that eases conformance   with the Windows Store.</li> </ul> <p>Tools:</p> <ul> <li>gendef: generate Visual Studio .def files from .dll files.</li> <li>genidl: generate .idl files from .dll files.</li> <li>widl: compile .idl files.</li> </ul>"},{"location":"#project-collaborations","title":"Project Collaborations","text":"<p>Mingw-w64 interacts a lot with other projects in order to help everyone move forward. Contributions have been going to and coming from these projects:</p> Cygwin           ReactOS           Wine           MSYS2"},{"location":"#projects-using-mingw-w64","title":"Projects using mingw-w64","text":"<ul> <li>Fedora cross-compiler</li> <li>Npackd</li> <li>OpenSUSE</li> <li>Win-builds</li> <li>Barchart-UDT</li> <li>Blender</li> <li>Boost</li> <li>Botan</li> <li>Code::Blocks</li> <li>DAE Tools</li> <li>devkitPro</li> <li>Disk Based HashTables</li> <li>Ecere SDK</li> <li>Ekiga</li> <li>Emerge Desktop</li> <li>Enlightenment</li> <li>Factor</li> <li>FFmpeg</li> <li>FLTK</li> <li>Freecell Solver</li> <li>Freeverb3</li> <li>GCC: The GNU Compiler Collection</li> <li>GDB: The GNU Project Debugger</li> <li>GIMP</li> <li>GNU Binutils</li> <li>GNU SASL</li> <li>GnuTLS</li> <li>GraphicsMagick</li> <li>GTK+</li> <li>Hexen II: Hammer of Thyrion</li> <li>ImageMagick</li> <li>JPen</li> <li>Kotlin</li> <li>KDE Software Collection</li> <li>LibreOffice</li> <li>libsndfile</li> <li>libvirt</li> <li>libvpx</li> <li>Libxml2</li> <li>MAME (Yes, the arcade emulator!)</li> <li>ManKai Common Lisp</li> <li>mpg123</li> <li>MS MPI</li> <li>OCaml</li> <li>OpenFOAM</li> <li>OpenLisp</li> <li>OpenSSL</li> <li>OpenTURNS</li> <li>Perl (5.12.0 and later)</li> <li>PostgreSQL</li> <li>pthreads</li> <li>PToolsWin</li> <li>QEMU</li> <li>Qt</li> <li>QuakeSpasm</li> <li>ReMooD</li> <li>Smart Image Denoiser</li> <li>smartmontools</li> <li>Strawberry Perl (bundles C toolchains)</li> <li>strongSwan</li> <li>The R Project for Statistical Computing</li> <li>VideoLAN VLC</li> <li>VSXu</li> <li>Woo</li> <li>wxWidgets</li> <li>YafaRay</li> <li>zlib</li> </ul> <p>Feel free to add your project to this list!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>The releases are sorted by date, with the most recent release at the top.</p>"},{"location":"changelog/#v1300-2025-06-08","title":"v13.0.0: 2025-06-08","text":"<p>Notable changes:</p> <ul> <li>Added import libraries for msvcr40d.dll, msvcrtd.dll, msvcr70d.dll, msvcr71d.dll, msvcr80d.dll, msvcr100d.dll, msvcr110d.dll.</li> <li>Better CRT API consistency between UCRT and MSVCRT, making many APIs available to earlier versions of the MSVCR* runtime as well.</li> <li>CRTDLL stat API fixes.</li> <li>Updated Hyper-V headers.</li> <li>Synchronized with Wine headers (from Wine 10.9).</li> <li>Many other new win32 APIs.</li> <li>Fix <code>_atexit</code> call differing between DLLs and EXEs.</li> <li>Basic support for ARM64EC targets (arm64ec-w64-mingw32).</li> <li>Make it possible to build winpthreads with MSVC and clang-cl.</li> <li>Many small fixes for gendef, genidl and genpeimg.</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order):</p> <p>Alexander Argentakis, Antonin D\u00e9cimo, Billy Laws, Biswapriyo Nath, Daniel Starke, Daniel Verkamp, David Grayson, Duncan Ogilvie, Isuru Fernando, Jacek Caban, Jeremy Drake, J\u00f8ger Hanseg\u00e5rd, Kirill Makurin, Lasse Collin, Le Philousophe, LIU Hao, Marc-Andr\u00e9 Lureau, Martin Storsj\u00f6, Nikolay Sivov, Pali Roh\u00e1r, Rafael Kitover, Steve Lhomme, TheShermanTanker, Yang Kun</p>"},{"location":"changelog/#v803-2024-06-05","title":"v8.0.3: 2024-06-05","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v1200-2024-05-29","title":"v12.0.0: 2024-05-29","text":"<p>Important: UCRT is now the default CRT runtime instead of MSVCRT, check the mingw-w64-doc/howto-build/ucrt-vs-msvcrt.txt document for details. Both header set and CRT must be configured and built with the same settings consistently for proper functionality. Switching runtimes requires all libraries to be rebuilt, including GCC.</p> <p>Notable changes:</p> <ul> <li>C++ overloads for <code>_strdate_s</code> and <code>_strtime_s</code>, <code>_makepath_s</code>, <code>wcsncat_s</code>.</li> <li>gdtoa updated against netlib.org, up to January 2023.</li> <li>genlib tool removed in favor of llvm-dlltool, created by the same author.</li> <li>Make it possible to use winpthreads with MSVC.</li> <li>Updated wine header imports.</li> <li>Many other new win32 APIs.</li> <li>UCRT configurations now primarily use (faster) math functions from UCRT, rather than libmingwex</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order):</p> <p>Antonin D\u00e9cimo, Bernhard \u00dcbelacker, Biswapriyo Nath, Christian Franke, Dustin Gadal, Jacek Caban, Jameson Nash, J\u00f8ger Hanseg\u00e5rd, Jonathan Schleifer, Kacper Michaj\u0142ow, LIU Hao, Mark Harmstone, Martin Storsj\u00f6, Mateusz Miku\u0142a, Nikolay Sivov, Oleg Tolmatcev, Ozkan Sezer, Pali Roh\u00e1r, Pavel Shishpor, Richard Copley, Steve Lhomme</p>"},{"location":"changelog/#v601-2023-10-30","title":"v6.0.1: 2023-10-30","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v505-2023-10-30","title":"v5.0.5: 2023-10-30","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v1101-2023-04-29","title":"v11.0.1: 2023-04-29","text":"<ul> <li>Fixes for w32api/Cygwin</li> </ul>"},{"location":"changelog/#v1100-2023-04-28","title":"v11.0.0: 2023-04-28","text":"<p>Notable changes:</p> <ul> <li>New libdloadhelper.a, like libdelayimp.a but using Windows 8 and later APIs.</li> <li>Fix race condition when building lib32 and lib64 in parallel on Windows.</li> <li>*recalloc now only available from msvcr90 and later, UCRT.</li> <li>Redirect access() to __mingw_access() on UCRT wrt to X_OK problems.</li> <li>New Hyper-V APIs.</li> <li>SEH based setjmp on ARM if supported by compiler.</li> <li>--enable-cfguard to enable Control Flow Guard in CRT, requires compiler   support, clang only at this time.</li> <li>Implement some of the stack protector functions/variables so -lssp is   now optional when _FORTIFY_SOURCE or -fstack-protector-strong is used.</li> <li>_FORTIFY_SOURCE=3 support added if __builtin_dynamic_object_size is supported   by the compiler (gcc 12 or later).</li> <li>genstubdll removed.</li> <li>uchar_c16rtomb, uchar_c32rtomb, uchar_mbrtoc16 and uchar_mbrtoc32 removed for   MSVCR*, UCRT only for now.</li> <li>Updates to DX12 headers and much more from Wine.</li> <li>Many other new win32 APIs.</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alvin Wong, Biswapriyo Nath, Christian Franke, Christoph Reiter, Costas Argyris, delthas, Dmitry Karasik, Jacek Caban, Jeremy Drake, L. E. Segovia, LIU Hao, Luca Bacci, Mark Harmstone, Markus M\u00fctzel, Martin Storsj\u00f6, Mateusz Wajch\u0119prze\u0142\u00f3\u017c, Matthew Lugg, Mike Gelfand, Oleg Oshmyan, Oleg Tolmatcev, Ozkan Sezer, Pali Roh\u00e1r, Raf Lopez, Sergei Trofimovich, Steve Lhomme, TheShermanTanker, Yannis Juglaret, Yonggang Luo, \u674e\u901a\u6d32,</p>"},{"location":"changelog/#v1000-2022-04-04","title":"v10.0.0: 2022-04-04","text":"<p>Notable changes:</p> <ul> <li>New msvcrt10, 20, 40, 70 and 71 import libraries.</li> <li>Drop x86_64 64bit crtdll.dll</li> <li>Updated wine imports</li> <li>Fix intrin.h compatibility with GCC-11</li> <li><code>_(v)scprintf</code> optimization</li> <li>optimize <code>__ms_vsnprintf</code> for LTO</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Biswapriyo Nath, Corinna Vinschen, davjam, Jacek Caban, Jeremy Drake, Jonathan Marler, Liu Hao, Mark Harmstone, Martin Storsj\u00f6, Matheus Izvekov, Michel Zou, Ozkan Sezer, Pali Roh\u00e1r, Patrick Northon, Ruslan Garipov, Steve Lhomme, Tom Ritter</p>"},{"location":"changelog/#v900-2021-05-22","title":"v9.0.0: 2021-05-22","text":"<p>Notable changes:</p> <ul> <li>UCRT updates by Biswapriyo Nath</li> <li>Wine updates by Jacek Caban</li> <li>Various new and updated API headers by Biswapriyo Nath and Liu Hao</li> <li>Various UCRT and MSVCRT fixes by Martin Storsj\u00f6</li> <li><code>at_quick_exit</code> implementation by Martin Storsj\u00f6</li> <li>dism API by Biswapriyo Nath</li> <li>idl fixes by Steve Lhomme</li> <li>Winpthreads fixes by Liu Hao</li> <li>gettimeofday precision increase by Christian Franke</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alex Henrie, Andrew Eikum, Biswapriyo Nath, Christian Franke, Christoph Reiter, DAVID MAY, Jacek Caban, Jeremy Drake, Jonathan Yong, Liu Hao, Mark Harmstone, Martin Storsj\u00f6, Mateusz Miku\u0142a, Nikolay Sivov, Ozkan Sezer, Pierre Lamot, Rafa\u0142 Harabie\u0144, Scr3amer, Steve Lhomme</p>"},{"location":"changelog/#v802-2021-05-09","title":"v8.0.2: 2021-05-09","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v801-2021-05-09","title":"v8.0.1: 2021-05-09","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v800-2020-09-18","title":"v8.0.0: 2020-09-18","text":"<p>Notable changes:</p> <ul> <li>New Hyper-V headers and libraries by Biswapriyo Nath</li> <li>Many headers updated from Wine by Jacek Caban.</li> <li>ARM math improvements by Martin Storsj\u00f6</li> <li>floating point fixes by Liu Hao</li> <li>many <code>*printf</code> compatibility fixes by Liu Hao and Martin Storsj\u00f6</li> <li>massive Windows App Store API updates by Steve Lhomme</li> <li>winstorecompat library updates by Martin Storsj\u00f6</li> <li><code>USE_MINGW_ANSI_STDIO</code> now automatically enabled in C99 and C11mode when not using UCRT by Pali Roh\u00e1r</li> <li>wdm and ddk updates by Zebediah Figura</li> <li>UCRT for Windows Store Apps (-lucrtapp) by Martin Storsj\u00f6</li> <li>Audioclient and ActivateAudioInterfaceAsync API updates by Liu Hao</li> <li>DirectX SDKs are now always installed</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alex Henrie, Biswapriyo Nath, Eric Hassold, Jacek Caban, Jehan Pag\u00e8s, Kleis Auke Wolthuizen, Liu Hao, Martin Mit\u00e1\u0161, Martin Storsj\u00f6, Nikolay Sivov, Noah Treuhaft, Pali Roh\u00e1r, Ruslan Garipov, Sanketh Menda, sezero, Stephan Ruloff, Stephen Kitt, Steve Lhomme, Tom Ritter, xtne6f, Zebediah Figura, \u5c48\u4f73\u4f1f</p>"},{"location":"changelog/#v700-2019-11-10","title":"v7.0.0: 2019-11-10","text":"<p>Notable changes:</p> <ul> <li><code>_FORTIFY_SOURCE</code> support thanks to Christian Franke.</li> <li>Lots of math fixes from Martin Storsj\u00f6.</li> <li>Many headers updated from Wine by Jacek Caban.</li> <li>UCRT support by Martin Storsj\u00f6.</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alexey Pavlov, Antoine C\u0153ur, Biswapriyo Nath, Chris Charabaruk, Christian Franke, Hugo Beauz\u00e9e-Luyssen, Jacek Caban, James Ross-Gowan, Johannes Pfau, Kai Tietz, Liu Hao, Marisa-Chan, Martin Storsj\u00f6, Marvin Scholz, Mateusz Brzostek, Matthew Palermo, Nikolay Sivov, Pierre Lamot, Richard Pospesel, Ruslan Garipov, sezero, SquallATF, Steve Lhomme, Tom\u00e1\u0161 Golembiovsk\u00fd, Tom Ritter, xnor, Zach Bacon, Zebediah Figura, \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432</p>"},{"location":"changelog/#v600-2018-09-17","title":"v6.0.0: 2018-09-17","text":"<p>Notable changes:</p> <ul> <li>C++ <code>__cxa_atexit</code> thanks to Martin Storsj\u00f6 and Liu Hao</li> <li>Massive additions to support UCRT thanks to Martin Storsj\u00f6</li> <li>Sync COM interface headers with Wine development thanks to Jacek Caban</li> <li>WinRT additions thanks to Hugo Beauz\u00e9e-Luyssen</li> <li>ARM32 and ARM64 additions thanks to Martin Storsj\u00f6</li> <li>CRT library api-ms-win-core additions thanks to Martin Storsj\u00f6</li> <li>CRT library def file reorganization thanks to Martin Storsj\u00f6</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alexey Pavlov Alon Bar-Lev Andr\u00e9 Hentschel Arthur Edelstein Corinna Vinschen David Grayson David Wohlferd Ebrahim Byagowi Guy Helmer Hugo Beauz\u00e9e-Luyssen Ihsan Akmal Jacek Caban James Ross-Gowan Jean-Baptiste Kempf Jonathan Yong Jon Turney Kai Tietz Liu Hao Martell Malone Martin Storsj\u00f6 Mateusz Matheus Izvekov mati865 Micha\u0142 Janiszewski Nikolay Sivov niXman Petri Hodju Ray Donnelly Ruben Van Boxem Ruslan Garipov Samuel D. Leslie sezero Soar Qin Tamar Christina Tamir Duberstein Tim Hutt Tom Ritter Yuta Nakai \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u0430\u0432\u043b\u043e\u0432 \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432 \u5b8b\u51ac\u751f</p>"},{"location":"changelog/#v504-2018-06-04","title":"v5.0.4: 2018-06-04","text":"<ul> <li>Fix gcc-8.1.0 compatibility regarding _xgetbv</li> <li><code>%e</code> printf specifier will now produce at least 2 digits for the   exponent.</li> </ul>"},{"location":"changelog/#v503-2017-11-04","title":"v5.0.3: 2017-11-04","text":"<ul> <li>pseudo-reloc will now try to restore page protection settings prior   to manipulating it, rather than simply assuming it was read-only   with execute.</li> <li>winpthreads: Fix undefined <code>__divmoddi4</code> when compiling with newly   bootstrapped gcc-7</li> <li>Fixed modf family segfault due to eax clobbering.</li> </ul>"},{"location":"changelog/#v502-2017-03-28","title":"v5.0.2: 2017-03-28","text":"<ul> <li>RegSetKeyValueW now has proper wide arguments.</li> <li>Fix some crashes in winpthreads due to misaligned memory access when   used with some SSE instructions.</li> <li>Fix pdh.h function calls to have proper stdcall decorators.</li> </ul>"},{"location":"changelog/#v501-2017-01-06","title":"v5.0.1: 2017-01-06","text":"<ul> <li>Don't use feature <code>(__attribute__((gcc_struct)))</code> that isn't supported on   clang when compiling on clang thanks to David Wohlferd.</li> <li>Various ARM math fixes thanks to Martin Storsj\u00f6</li> <li>Removed some duplicate uuids definitions, thanks to HugoBeauz\u00e9e-Luyssen.</li> <li>Define <code>IN6_IS_ADDR_</code> macros to conform to Posix Specm thanks toJean-Baptiste   Kempf</li> <li>dxva.h: Add support for VP8/9 in DxVA2 thanks to Yuta Nakai</li> </ul>"},{"location":"changelog/#v500-2016-10-19","title":"v5.0.0: 2016-10-19","text":"<ul> <li>Fixes to the <code>__mingw_printf</code> family of functions.</li> <li>DirectX updates from Wine.</li> <li>Various updates to support Windows 7 and 10.</li> <li>Various header typo fixes.</li> </ul>"},{"location":"changelog/#v4","title":"v4","text":"<ul> <li>32bit ARM thumb software math (Thanks to Andr\u00e9 Hentschel!).</li> <li>New ftw() support for gcc-5.x support.</li> <li>Experimental printf changes - Ability to print 128bit integers   (%I128*) and Decimal Floats (%H, %D), disabled by default. Build   the CRT with <code>--enable-experimental</code> to use.</li> <li>Updated OpenGL 4.5 headers.</li> <li>Better DirectX 11 support.</li> <li>Better Windows 7, 8/8.1 API support.</li> </ul>"},{"location":"changelog/#v3","title":"v3","text":"<ul> <li>Required for GCC 4.8.</li> <li>Much improved floating point math performance.</li> <li>Improved MSVC intrinsics performance.</li> <li>Addition of wide variants in C99 printf and scanf.</li> <li>Partial C1X secure CRT support.</li> <li>Partial MS Secure CRT templates for C++.</li> <li>Vastly improved Windows 7 and 8 win32 API support.</li> <li>POSIX-style Large File Support.</li> <li>Winpthread: new library, pthreads implementation for Windows.</li> <li>Winstorecompat: new library for Windows Store compatibility (WIP).</li> </ul>"},{"location":"changelog/#v2","title":"v2","text":"<ul> <li>Expanded Windows Vista/7 API support.</li> </ul>"},{"location":"contribute/","title":"Contribute","text":"<p>Warning</p> <p>The information on this page is outdated and needs to be updated.</p> <p>Mingw-w64 and the ecosystem surrounding it are stable and with many features. There are however some topics for which developer-time has been scarce. This page lists tasks that are relatively simple and can be worked on without the need for a huge background while still being important and high on the wish-lists of users.</p> <p>In order to avoid duplicate efforts, if you take on one of these tasks, please mention it on the mailing-list.</p> <p>The tasks below have been split enough to be simple and fairly well-contained while still being useful on their own. Most could be internship topics.</p> <p>There are references to other websites on this page; their presence does not constitute an endorsement in any way.</p>"},{"location":"contribute/#win32-api-and-runtime","title":"Win32 API and Runtime","text":"<p>Mingw-w64 is constantly looking for updates to its win32 API headers from MSDN Library. If you believe you have found an API that is not available in mingw-w64 but is documented as part of MSDN or a mistake in mingw-w64, please do not hesitate to contact us through the mailing-list.</p> <p>For patch submissions, please remember to use sign-off your git commits before submitting the patches to the mailing-list. Both git send-email and git format-patch forms are allowed. From past experiences however, if you do use an email client to attach individual patches, please use the .txt extension, especially for Google Mail users so the patch does not get treated as a binary.</p>"},{"location":"contribute/#seh-for-32bits","title":"SEH for 32bits","text":"<p>The patent for SEH for 32bits has now expired and while new computers are all 64 bits, Intel has continued selling Atom CPUs that only handled 32 bits very late and some applications are still 32 bits. Projects such as Wine and ReactOS will also benefit from 32bits SEH. Overall the need is still there and will continue for years to come and will outlast Microsoft's support for 32bits.</p> <p>Note that you will need FSF paperwork since the work has to be done inside GCC. Check CC's page on contributing.</p> <ul> <li>The now-expired patent on SEH</li> <li>A Crash Course on the Depths of Win32\u2122 Structured Exception Handling</li> <li>Win32 Exceptions \u2013 OS Level Point of View</li> <li>How a C++ compiler implements exception handling</li> <li>Structured Exception Handling Basics</li> <li>Windows' SEH and C++ Exception Handling</li> <li>Structured Exception Handling Considered Harmful</li> <li>SEH and C++ Exceptions - catch all in one</li> <li>GCC sources and   unwind-seh.c   in particular. Note that 32-bit SEH is stack-based and requires   code-generation unlike 64bits SEH which is simply table-based (that difference   explains why the patent only mattered to 32bits).</li> </ul>"},{"location":"contribute/#sanitizers-asan-tsan-usan","title":"Sanitizers (ASAN, TSAN, USAN)","text":"<p>Sanitizers are runtime checks for a number of situations which have usually required instrumentation with tools that cause an important slowdown (like Valgrind).</p> <p>They are relatively new and much lighter than other approaches.</p>"},{"location":"contribute/#thorough-status-report-for-sanitizers-asan-tsan-usan","title":"Thorough Status Report for Sanitizers (asan, tsan, usan)","text":"<p>ASAN, TSAN and USAN are great technologies which are available in GCC. Unfortunately they are not completely usable on Windows. A proper review and tests are needed before anything.</p>"},{"location":"contribute/#fixing-remaining-bits-in-asan-tsan-or-usan-see-above","title":"Fixing remaining bits in asan, tsan or usan (see above)","text":"<p>Once a report on the status is available, work on it can be started.</p>"},{"location":"contribute/#link-time-optimization-lto","title":"Link-Time Optimization (LTO)","text":"<p>Optimizations in C cannot cross compilation units and many of them are therefore missed in large applications and when using libraries. LTO runs some optimizations during linking, when the toolchain can see all the objects at once and run cross-unit optimizations.</p>"},{"location":"contribute/#thorough-status-report-for-lto","title":"Thorough Status Report for LTO","text":"<p>LTO has recently been improved a lot in GCC and binutils. There are still some issues on Windows though. The first step to making it work is to get a proper and up-to-date test and to identify the platform-specific bugs.</p>"},{"location":"contribute/#fixing-remaining-bits-in-lto","title":"Fixing remaining bits in LTO","text":"<p>Fix the issues found by the status report from above. The actual bug list will be updated as it becomes available.</p>"},{"location":"contribute/#compiler-plugin-for-visual-studio","title":"Compiler plugin for Visual Studio","text":"<p>A compiler plugin would make GCC, binutils tools and GDB available from the Visual Studio IDE. Most people state they stick with VS because of the IDE; such a plugin would allow mixing the two.</p> <p>VisualGDB (commercial) provides such a plugin, apparently meant for compiling to micro-controllers and Linux (Android or not).</p>"},{"location":"contribute/#debug-infos","title":"Debug Infos","text":"<p>PDB is the file-format used by Microsoft to store debug info. Unfortunately it is undocumented.</p>"},{"location":"contribute/#documentation-of-the-pdb-file-format","title":"Documentation of the PDB file-format","text":"<p>Since the format is undocumented, first step is to document it. Fortunately, during the past few years, reader and possibly writer code has appeared, mostly out of Microsoft.</p> <ul> <li> <p>A library named ''dump_syms'' is   available. It can read PDB files at least to some extent. Licensing and origin   need to be checked.</p> </li> <li> <p>Microsoft has released Roslyn, a \".NET Compiler   Platform\". It contains a PDB writer   implementation.   This may be an actual implementation or only an interface to the actual one.   It is difficult to say without further analysis.</p> </li> <li> <p>Microsoft has also released CCI Metadata   under the MS-PL. It contains PDB   reader   implementation   that should constitute an appropriate source.</p> </li> </ul>"},{"location":"contribute/#creation-of-pdb-files","title":"Creation of PDB files","text":"<p>Creating PDB files will allow the Microsoft tools to make meaningful backtraces when code built with free compilers is involved.</p>"},{"location":"contribute/#handling-of-pdb-in-gdb","title":"Handling of PDB in GDB","text":"<p>Reading PDB files will allow free tools to make meaningful backtraces when code built with MSVC is involved.</p>"},{"location":"contribute/#translation-fromto-pdb","title":"Translation from/to PDB","text":"<p>Most often debug information will only be available in a single format. Being able to convert between them when needed will be useful.</p>"},{"location":"contribute/#c11-and-c11-threading-support","title":"C11 and C++11 Threading Support","text":""},{"location":"contribute/#c11-threading-and-atomics","title":"C11 Threading and Atomics","text":"<p>The C11 standard has a section on threading which is still left unimplemented on several platforms. The API follows pthreads' quite closely and it is left to the implementer to decide whether to base it on winpthreads or directly on the (&gt;= Vista) Win32 API.</p> <p>The final C11 draft is identical to the standard but is available freely.</p> <p>Note that you will need FSF paperwork since the work has to be done inside GCC. Check GCC's page on contributing.</p>"},{"location":"contribute/#implementation-of-c11-and-c11-threading-support-without-winpthreads","title":"Implementation of C11 and C++11 Threading Support Without Winpthreads","text":""},{"location":"contribute/#mcfgthread","title":"mcfgthread","text":"<p>The mcfgthread library aims at providing an efficient implementation of thread support for GCC that is required by the C11 and C++11 standard. It uses a lot of undocumented Windows NT syscalls to ensure performance. Its introduction and manual can be found from its wiki pages.</p>"},{"location":"donate/","title":"Donate","text":"<p>Warning</p> <p>The information on this page is outdated and needs to be updated.</p> <p>Mingw-w64 is almost entirely made by volunteer. Only two employees are paid to contribute to mingw-w64 and even then it's not full-time: we estimate the paid time spent on the project matches 0.5-employee. All other contributions are done on free time.</p> <p>There are many evolutions and features planned but resources are scarce. In particular, if mingw-w64 saves you from the steep cost of proprietary toolchains, think about contributing a bit; you will also most likely quickly benefit from the improvements.</p>"},{"location":"donate/#non-financial-contributions","title":"Non-financial contributions","text":"<p>More than through money, the best way to help the project is to invest man-time in it. The list of tasks on the page about contributing is the best place to start and if you are an employer with trainees, several of these tasks will make good internship.</p>"},{"location":"donate/#donations","title":"Donations","text":"<p>With the current organization and funds of mingw-w64, it wouldn't make sense to try to pay a developer to spend time on specific topics. Instead, the money will be spent on hardware (testing servers, Windows licenses, phone, tablets, ...) and meeting expenses (setting up hackatons and paying for travel expenses as some major mingw-w64 developers live very far from others).</p> <p>Currently, only Paypal is available:</p> <p>Paypal (to Ka\u00ef Tietz)</p> <p>Below is a list of donors, starting from January 2015. We'd like to list all our donors but we value your wishes; please state whether you'd like to have your name, pseudonym or company on the website.</p> <ul> <li>James Beard</li> <li>WSoptics GmbH</li> </ul>"},{"location":"donate/#hardware-donations","title":"Hardware donations","text":"<p>There is no facility at the moment to receive hardware. These donations will have to be handled on a case-by-case basis (mostly to decide where to ship).</p>"},{"location":"downloads/","title":"Pre-built Toolchains","text":"<p>While mingw-w64 provides the core Windows headers and libraries needed for Windows development, it's not very useful on its own. Most users should install a pre-built toolchain that combines mingw-w64 with a compiler (like GCC with binutils, or LLVM/Clang) and other essential build components. These distributions package everything needed to compile programs for Windows and are much easier to set up than building from source.</p>"},{"location":"downloads/#pre-built-toolchains-and-packages","title":"Pre-built toolchains and packages","text":"Version  Host  GCC / mingw-w64 Version  Languages  Additional Software in Package Manager   Arch                         Linux Rolling Linux 14.2.0/12.0.0 Ada, C, C++, Fortran, Obj-C, Obj-C++  many Cygwin Rolling Windows 12.4.0/12.0.0 C, C++, Fortran, Obj-C   many Debian Debian 10 (Buster)  8.3.0/6.0.0  Ada, C, C++, Fortran, Obj-C, Obj-C++  9 (gdb, libassuan, libgcrypt, libgpg-error, libksba, libnpth, nsis, win-iconv, zlib)  Debian 11 (Bullseye)  10.2.1/8.0.0  Debian 12 (Bookworm)  12.0.0/10.0.0   Fedora Fedora 40  14.1.1/11.0.1  Ada, C, C++, Fortran, Obj-C, Obj-C++   many Fedora 41  14.2.1/12.0.0  LLVM-MinGW 20240518 Windows, Linux, macOS LLVM 18.1.6/trunk C, C++ make, Python                          MacPorts Rolling  macOS 14.2.0/12.0.0 C, C++, Fortran, Obj-C, Obj-C++  1 (nsis) MinGW-W64-builds Rolling  Windows 13.1.0/11.0.0  C, C++, Fortran  4 (gdb, libiconf, python, zlib)  MSYS2 Rolling  Windows 14.2.0/trunk Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml  many  Ubuntu  20.04 Focal Fossa  9.3.0/7.0.0  Ada, C, C++, Fortran, Obj-C, Obj-C++  9 (gdb, libassuan, libgcrypt, libgpg-error, libksba, libnpth, nsis, win-iconv, zlib)   22.04 Jammy Jellyfish  10.3.0/8.0.0   24.04 Noble Numbat  13.2.0/11.0.1   24.10 Oracular Oriole  14.1.0/12.0.0  w64devkit 2.0.0 Windows 14.2.0/12.0.0 C, C++, Fortran                  8                 (busybox,                 cppcheck,                 ctags,                 gdb,                 make,                 nasm,                 pkg-config,                 vim)              WinLibs.com Rolling  Windows 13.2.0 Ada, C, C++, Fortran, Obj-C, Obj-C++, Assembler Package manager: work in progress (will offer &gt; 2500 packages)"},{"location":"downloads/#arch-linux","title":"Arch Linux","text":"<p>Installation:</p> <ul> <li>Extra repository (toolchain)</li> <li>AUR repository (additional packages)</li> </ul>"},{"location":"downloads/#cygwin","title":"Cygwin","text":"<p>Cygwin is a Unix-like environment and command-line interface for Microsoft Windows. Its core is the cygwin1.dll library which provides POSIX functionality on top of the Win32 API. It can be used as a build environment which targets Windows directly and for which output doesn't depend on cygwin1.dll.</p> <p>Installation is done through cygwin's package manager: setup.exe.</p> <p>As part of the numerous packages in cygwin, there are cross-compilation toolchains which target both 32 bits and 64 bits; their names start with \u201cmingw64-\u201d.</p> <p>Once they are installed, they should be used according to the general cross-compilation approach.</p>"},{"location":"downloads/#debian","title":"Debian","text":"<p>Installation: through integrated package manager.</p> <p>mingw-w64 packages on Debian</p>"},{"location":"downloads/#fedora","title":"Fedora","text":"<p>Installation: through integrated package manager.</p>"},{"location":"downloads/#llvm-mingw","title":"LLVM-MinGW","text":"<p>LLVM-MinGW is a toolchain built with Clang, LLD, libc++, targeting i686, x86_64, arm and aarch64 (ARM64), with releases both for running as a cross compiler from Linux and for running on Windows. It supports Address Sanitizer, Undefined Behaviour Sanitizer, and generating debug info in PDB format.</p> <p>Installation: GitHub</p>"},{"location":"downloads/#macports","title":"MacPorts","text":"<p>To install just the 32-bit or just 64-bit compiler with dependencies, use:</p> <pre><code>sudo port install i686-w64-mingw32-gcc\nsudo port install x86_64-w64-mingw32-gcc\n</code></pre> <p>A shortcut to install both:</p> <pre><code>sudo port install mingw-w64\n</code></pre> <p>Here is the list of mingw-w64 packages on MacPorts.</p>"},{"location":"downloads/#mingw-w64-builds","title":"MinGW-W64-builds","text":"<p>Installation: GitHub</p>"},{"location":"downloads/#msys2","title":"MSYS2","text":"<p>Installation: GitHub</p>"},{"location":"downloads/#ubuntu","title":"Ubuntu","text":"<p>Installation: through integrated package manager.</p> <p>mingw-w64 packages on Ubuntu</p>"},{"location":"downloads/#w64devkit","title":"w64devkit","text":"<p>w64devkit is a portable C and C++ development kit for x64 (and x86) Windows.</p> <p>Included tools:</p> <ul> <li>mingw-w64 GCC : compilers, linker, assembler</li> <li>GDB : debugger</li> <li>GNU Make : standard build tool</li> <li>busybox-w32 : standard unix utilities, including sh</li> <li>Vim : powerful text editor</li> <li>Universal Ctags : source navigation</li> <li>NASM : x86 assembler</li> <li>Cppcheck : static code analysis</li> </ul> <p>The toolchain includes pthreads, C++11 threads, and OpenMP. All included runtime components are static.</p> <p>Installation: GitHub</p>"},{"location":"downloads/#winlibscom","title":"WinLibs.com","text":"<p>Standalone mingw-w64+GCC builds for Windows, built from scratch (including all dependencies) natively on Windows for Windows.</p> <p>Downloads are archive files (<code>.zip</code> or <code>.7z</code>). No installation is required, just extract the archive and start using the programs in <code>mingw32\\bin</code> or  <code>mingw64\\bin</code>. This allows for a relocatable compiler suite and allows having multiple versions on the same system.</p> <p>Also contains other tools including:</p> <ul> <li>GDB - the GNU Project debugger</li> <li>GNU Binutils - a collection of binary tools</li> <li>GNU Make - a tool which controls the generation of executables and other non-source files</li> <li>Yasm - The Yasm Modular Assembler Project</li> <li>NASM - The Netwide Assembler</li> <li>JWasm - A free MASM-compatible assembler</li> </ul> <p>Flavors:</p> <ul> <li>separate packages for 32-bit (i686) and 64-bit (x86_64) Windows</li> <li>separate packages for MSVCRT and UCRT builds</li> <li>only POSIX threads builds (which also include Win32 API thread functions)</li> <li>exception model: Dwarf for 32-bit (i686) and SEH for 64-bit (x86_64)</li> </ul> <p>Installation: Download from winlibs.com and extract archive (no installation needed).</p>"},{"location":"downloads/#unsorted-complementary-list","title":"Unsorted complementary list","text":""},{"location":"downloads/#gcc-with-the-mcf-thread-model","title":"GCC with the MCF thread model","text":"<p>GCC with the MCF thread model is a series of x86 and x64 native toolchains built by LH_Mouse. The MCF thread model has been merged into GCC 13, and can be enabled by passing <code>--enable-threads=mcf</code> to GCC's configure script. C++11 threading facilities, such as <code>std::thread</code>, <code>std::mutex</code>, <code>std::condition_variable</code>, <code>std::call_once</code>, <code>thread_local</code> etc. invoke the mcfgthread library, which implements them on Windows syscalls in a more standard-compliant and more efficient way, outperforming even native slim reader/write locks (SRW) since Windows Vista.</p>"},{"location":"downloads/#opensuse","title":"OpenSUSE","text":"<p>The OpenSUSE Linux distribution also has a large and well-maintained set of packages for cross-compilation.</p>"},{"location":"source/","title":"Source Code","text":""},{"location":"source/#release-tarballs","title":"Release Tarballs","text":"<p>Tarballs for the mingw-w64 sources are hosted on SourceForge.</p> <p>Latest version by series:</p> <ul> <li>13.0.0 (12x)</li> <li>12.0.0 (12x)</li> <li>11.0.1 (11.x)</li> <li>10.0.0 (10.x)</li> <li>9.0.0 (9.x)</li> <li>8.0.3 (8.x)</li> <li>7.0.0 (7.x)</li> <li>6.0.1 (6.x)</li> <li>5.0.5 (5.x)</li> </ul> <p>The old wiki has instructions for building native and cross toolchains.</p>"},{"location":"source/#git-repository","title":"Git Repository","text":"<p>The main repository can be cloned from SourceForge:</p> <pre><code>$ git clone https://git.code.sf.net/p/mingw-w64/mingw-w64 mingw-w64\n</code></pre> <p>You can also browse the code on SourceForge.</p> <p>There also exists a GitHub mirror which is updated semi-regularly.</p>"},{"location":"support/","title":"Support &amp; Contact","text":"<p>Mingw-w64 has several active support channels.</p> <ul> <li>Mailing-List</li> <li>#mingw-w64 IRC channel on irc.oftc.net</li> <li>Discussion Forum</li> <li>Issue Tracker</li> </ul>"},{"location":"support/#licensing","title":"Licensing","text":"<p>Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves.</p> <p>The ReactOS and Wine logos used on the website are licensed under the GPLv2.</p>"},{"location":"build-systems/cmake/","title":"CMake","text":"<p>CMake is a widely-used, cross-platform build system generator with excellent support for mingw-w64. See the official documentation for more information.</p>"},{"location":"build-systems/cmake/#detect-mingw-w64-at-configuration-time","title":"Detect mingw-w64 at Configuration Time","text":"<p>While preprocessor definitions can be used to detect mingw-w64 at compile time, CMake provides variables to detect it during configuration:</p> <pre><code># CMakeLists.txt\nif(MINGW)\n    message(STATUS \"Building with mingw-w64\")\nelse()\n    message(STATUS \"Not building with mingw-w64\")\nendif()\n</code></pre>"},{"location":"build-systems/cmake/#cross-compiling-on-linux","title":"Cross compiling on Linux","text":"<p>To cross compile a CMake project for Windows while working on Linux:</p> <ul> <li>Install a Windows cross compiler on your Linux system</li> <li>Create or use a toolchain file that defines how CMake should use the cross compiler</li> <li>Configure your project with the toolchain file</li> </ul> <p>For detailed instructions, consult the official CMake documentation.</p> <pre><code># toolchain-mingw64.cmake\nset(CMAKE_SYSTEM_NAME Windows)\nset(CMAKE_SYSTEM_PROCESSOR x86_64)\n\n# specify the cross compiler\nset(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)\nset(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)\nset(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)\n\n# where is the target environment\nset(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)\n\n# search for programs in the build host directories\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n# for libraries and headers in the target directories\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n</code></pre> <pre><code>$ cmake -B build -DCMAKE_TOOLCHAIN_FILE=toolchain-mingw64.cmake\n$ cmake --build build\n$ wine build/hello.exe\nHello, Windows!\n</code></pre>"},{"location":"build-systems/meson/","title":"Meson","text":"<p>Meson is a multiplatform build system with good support for mingw-w64. See the official documentation for more details.</p>"},{"location":"build-systems/meson/#detect-mingw-w64-at-configuration-time","title":"Detect mingw-w64 at Configuration Time","text":"<p>While it should be sufficient in most cases to use the preprocessor to detect mingw-w64 at compile time, it can also be detected at configuration time if necessary:</p> <pre><code># meson.build\ncc = meson.get_compiler('c')\nis_windows = host_machine.system() == 'windows'\nis_mingw = is_windows and cc.get_define('__MINGW32__') != ''\nif is_mingw\n    message('Building with mingw-w64')\nelse\n    message('Not building with mingw-w64')\nendif\n</code></pre>"},{"location":"build-systems/meson/#cross-compiling-on-linux","title":"Cross compiling on Linux","text":"<p>To cross compile a meson project for Windows while working on Linux:</p> <ul> <li>Install a Windows cross compiler on your Linux system</li> <li>Create or use a cross file that defines how meson should use the cross   compiler</li> <li>Configure your project with the cross file</li> </ul> <p>For detailed instructions, consult the official meson documentation.</p> <pre><code># cross-mingw64.txt\n[host_machine]\nsystem = 'windows'\ncpu_family = 'x86_64'\ncpu = 'x86_64'\nendian = 'little'\n\n[binaries]\nc = 'x86_64-w64-mingw32-gcc'\ncpp = 'x86_64-w64-mingw32-g++'\nar = 'x86_64-w64-mingw32-ar'\nld = 'x86_64-w64-mingw32-ld'\nobjcopy = 'x86_64-w64-mingw32-objcopy'\nstrip = 'x86_64-w64-mingw32-strip'\npkg-config = 'x86_64-w64-mingw32-pkg-config'\nwindres = 'x86_64-w64-mingw32-windres'\n</code></pre> <pre><code>$ meson setup builddir --cross-file cross-mingw64.txt\n$ meson compile -C builddir\n$ wine builddir/hello.exe\nHello, Windows!\n</code></pre>"},{"location":"getting-started/archlinux/","title":"Arch Linux","text":""},{"location":"getting-started/archlinux/#installation","title":"Installation","text":"<p>Install the 64bit C and C++ cross-compilers:</p> <pre><code>$ sudo pacman -S mingw-w64-gcc\n</code></pre> <p>To check the version of the provided GCC and mingw-w64:</p> <pre><code>$ pacman -Qi mingw-w64-gcc | grep Version\nVersion         : 14.2.0-3  # GCC Version\n$ pacman -Qi mingw-w64-headers | grep Version\nVersion         : 12.0.0-1  # mingw-w64 Version\n</code></pre>"},{"location":"getting-started/archlinux/#building","title":"Building","text":"<p>Cross compiling a Windows executable:</p> <pre><code>// hello.c\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello, Windows!\\n\");\n    return 0;\n}\n</code></pre> <pre><code>$ x86_64-w64-mingw32-gcc hello.c -o hello.exe\n</code></pre>"},{"location":"getting-started/archlinux/#testing","title":"Testing","text":"<p>For installing wine, the multilib repo has to be enabled first. See the Arch Wiki for more information. After that is done:</p> <pre><code>$ sudo pacman -S wine\n</code></pre> <pre><code>$ wine hello.exe\nHello, Windows!\n</code></pre>"},{"location":"getting-started/debian/","title":"Debian / Ubuntu","text":""},{"location":"getting-started/debian/#installation","title":"Installation","text":"<p>Install the 64bit C and C++ cross-compilers.</p> msvcrtucrt <pre><code>$ sudo apt install g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64\n</code></pre> <pre><code>$ sudo apt install g++-mingw-w64-ucrt64 gcc-mingw-w64-ucrt64\n</code></pre> <p>Note: UCRT targeting cross compilers are currently only available in Debian 13 (trixie).</p> <p>To check the version of the provided GCC and mingw-w64 via:</p> msvcrtucrt <pre><code>$ apt-cache show gcc-mingw-w64-x86-64 | grep Version:\nVersion: 13.3.0-12+26.7  # GCC Version\n$ apt-cache show mingw-w64-x86-64-dev | grep Version:\nVersion: 12.0.0-5  # mingw-w64 Version\n</code></pre> <pre><code>$ apt-cache show gcc-mingw-w64-ucrt64 | grep Version:\nVersion: 13.3.0-12+26.7  # GCC Version\n$ apt-cache show mingw-w64-ucrt64-dev | grep Version:\nVersion: 12.0.0-5  # mingw-w64 Version\n</code></pre>"},{"location":"getting-started/debian/#building","title":"Building","text":"<p>Cross compiling a Windows executable:</p> <pre><code>// hello.c\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello, Windows!\\n\");\n    return 0;\n}\n</code></pre> msvcrtucrt <pre><code>$ x86_64-w64-mingw32-gcc hello.c -o hello.exe\n</code></pre> <pre><code>$ x86_64-w64-mingw32ucrt-gcc hello.c -o hello.exe\n</code></pre>"},{"location":"getting-started/debian/#testing","title":"Testing","text":"<p>Testing on Linux using Wine:</p> <pre><code>$ sudo apt install wine\n</code></pre> <pre><code>$ wine hello.exe\nHello, Windows!\n</code></pre>"},{"location":"getting-started/fedora/","title":"Fedora","text":""},{"location":"getting-started/fedora/#installation","title":"Installation","text":"<p>Install the 64bit C and C++ cross-compilers:</p> msvcrtucrt <pre><code>$ sudo dnf install mingw64-gcc-c++\n</code></pre> <pre><code>$ sudo dnf install ucrt64-gcc-c++\n</code></pre> <p>To check the version of the provided GCC and mingw-w64:</p> msvcrtucrt <pre><code>$ dnf info --installed mingw64-gcc | grep Version\nVersion      : 14.2.1  # GCC Version\n$ dnf info --installed mingw64-crt | grep Version\nVersion      : 12.0.0  # mingw-w64 Version\n</code></pre> <pre><code>$ dnf info --installed ucrt64-gcc | grep Version\nVersion      : 14.2.1  # GCC Version\n$ dnf info --installed ucrt64-crt | grep Version\nVersion      : 12.0.0  # mingw-w64 Version\n</code></pre>"},{"location":"getting-started/fedora/#building","title":"Building","text":"<p>Cross compiling a Windows executable:</p> <pre><code>// hello.c\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello, Windows!\\n\");\n    return 0;\n}\n</code></pre> msvcrtucrt <pre><code>$ x86_64-w64-mingw32-gcc hello.c -o hello.exe\n</code></pre> <pre><code>$ x86_64-w64-mingw32ucrt-gcc hello.c -o hello.exe\n</code></pre>"},{"location":"getting-started/fedora/#testing","title":"Testing","text":"<p>Testing on Linux using Wine:</p> <pre><code>$ sudo dnf install wine\n</code></pre> <pre><code>$ wine hello.exe\nHello, Windows!\n</code></pre>"},{"location":"getting-started/msys2-llvm/","title":"MSYS2 (Clang/LLVM)","text":""},{"location":"getting-started/msys2-llvm/#installation","title":"Installation","text":"<p>Install MSYS2 from the official website: https://www.msys2.org</p> <p>After installation, open \"MSYS2 CLANG64\" from the Start menu and install the C and C++ compiler:</p> <pre><code>$ pacman -S mingw-w64-clang-x86_64-clang\n</code></pre> <p>To check the version of the provided Clang and mingw-w64:</p> <pre><code>$ pacman -Qi mingw-w64-clang-x86_64-clang | grep Version\nVersion         : 19.1.7-1  # Clang Version\n$ pacman -Qi mingw-w64-clang-x86_64-headers | grep Version\nVersion         : 12.0.0.r473.gce0d0bfb7-1  # mingw-w64 Version\n</code></pre>"},{"location":"getting-started/msys2-llvm/#building","title":"Building","text":"<p>Creating and compiling a Windows executable:</p> <pre><code>// hello.c\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello, Windows!\\n\");\n    return 0;\n}\n</code></pre> <pre><code>$ clang hello.c -o hello.exe\n</code></pre>"},{"location":"getting-started/msys2-llvm/#testing","title":"Testing","text":"<pre><code>$ ./hello.exe\nHello, Windows!\n</code></pre>"},{"location":"getting-started/msys2/","title":"MSYS2 (GCC)","text":""},{"location":"getting-started/msys2/#installation","title":"Installation","text":"<p>Install MSYS2 from the official website: https://www.msys2.org</p> <p>After installation, open \"MSYS2 UCRT64\" from the Start menu and install the C and C++ compiler:</p> <pre><code>$ pacman -S mingw-w64-ucrt-x86_64-gcc\n</code></pre> <p>To check the version of the provided GCC and mingw-w64:</p> <pre><code>$ pacman -Qi mingw-w64-ucrt-x86_64-gcc | grep Version\nVersion         : 14.2.0-2  # GCC Version\n$ pacman -Qi mingw-w64-ucrt-x86_64-headers | grep Version\nVersion         : 12.0.0.r473.gce0d0bfb7-1  # mingw-w64 Version\n</code></pre>"},{"location":"getting-started/msys2/#building","title":"Building","text":"<p>Creating and compiling a Windows executable:</p> <pre><code>// hello.c\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello, Windows!\\n\");\n    return 0;\n}\n</code></pre> <pre><code>$ gcc hello.c -o hello.exe\n</code></pre>"},{"location":"getting-started/msys2/#testing","title":"Testing","text":"<pre><code>$ ./hello.exe\nHello, Windows!\n</code></pre>"},{"location":"tools/gendef/","title":"gendef(1)","text":""},{"location":"tools/gendef/#name","title":"NAME","text":"<p>gendef - DLL export extractor</p>"},{"location":"tools/gendef/#synopsis","title":"SYNOPSIS","text":"<p>gendef [options] &lt;DLL&gt;</p>"},{"location":"tools/gendef/#description","title":"DESCRIPTION","text":"<p>gendef dumps DLL export information from 32- and 64-bit Windows executables (respectively PE32 and PE32+ executables).</p>"},{"location":"tools/gendef/#options","title":"OPTIONS","text":"<ul> <li>- - Dump to stdout</li> <li>-h, --help - Briefly describe the syntax and options</li> <li>-a, --assume-stdcall - Assume functions with ambiguous calling conventions use stdcall</li> <li>-I, --include-def-path path - Add additional search paths in which to look for hint .def files</li> <li>-f, --no-forward-output - Don't output forwarders</li> </ul>"},{"location":"tools/gendef/#output","title":"OUTPUT","text":"<p>By default gendef writes the DLL export information to a file named after the DLL, replacing .dll with .def.</p>"},{"location":"tools/gendef/#known-issues","title":"KNOWN ISSUES","text":"<p>For 32-bit DLLs, gendef cannot detect if a function with no return value (void) exported by a DLL uses stdcall or cdecl. Two workarounds are available: either use the \"-a\" option to force stdcall calling conventions, or generate .def files for any DLLs the DLL you're interested in depends upon. gendef will read other .def files found in the working directory to determine the calling convention in use.</p> <p>64-bit DLLs are not affected, since they only use a single calling convention.</p>"},{"location":"tools/gendef/#see-also","title":"SEE ALSO","text":"<p>genidl(1)</p>"},{"location":"tools/gendef/#authors","title":"AUTHORS","text":"<p>gendef was written by Kai Tietz and Jonathan Yong of the MinGW-w64 project.</p> <p>This manual page was written by Stephen Kitt &lt;steve@sk2.org&gt;, based on information provided with the program and in the project's wiki, for the Debian GNU/Linux system (but may be used by others).</p>"},{"location":"tools/genidl/","title":"genidl(1)","text":""},{"location":"tools/genidl/#name","title":"NAME","text":"<p>genidl - Windows typelib information extractor</p>"},{"location":"tools/genidl/#synopsis","title":"SYNOPSIS","text":"<p>genidl [options] &lt;file&gt;</p>"},{"location":"tools/genidl/#description","title":"DESCRIPTION","text":"<p>genidl dumps IDL information found in typelib data present in 32- and 64-bit Windows executables and TLB files.</p>"},{"location":"tools/genidl/#options","title":"OPTIONS","text":"<p>-h, --help Briefly describe the syntax and options.</p> <p>-b &lt;arg&gt;, --basedumpname=&lt;arg&gt; Use arg as prefix of generated .idl files.</p> <p>-H, --header Generate a header.</p> <p>-d, --dump Dump additional debugging information.</p> <p>-v, --verbose Show additional status information.</p>"},{"location":"tools/genidl/#see-also","title":"SEE ALSO","text":"<p>gendef(1)</p>"},{"location":"tools/genidl/#authors","title":"AUTHORS","text":"<p>genidl was written by Kai Tietz and Jonathan Yong of the MinGW-w64 project.</p> <p>This manual page was written by Stephen Kitt &lt;steve@sk2.org&gt; for the Debian GNU/Linux system (but may be used by others).</p>"},{"location":"tools/genpeimg/","title":"genpeimg(1)","text":""},{"location":"tools/genpeimg/#name","title":"NAME","text":"<p>genpeimg - Modify Portable Executable flags and properties</p>"},{"location":"tools/genpeimg/#synopsis","title":"SYNOPSIS","text":"<p>genpeimg [options] files...</p>"},{"location":"tools/genpeimg/#description","title":"DESCRIPTION","text":"<p>genpeimg is a tool for modifying characteristics and properties of Portable Executable (PE) files. It can modify PE header characteristics, DLL characteristics, and the subsystem type.</p>"},{"location":"tools/genpeimg/#options","title":"OPTIONS","text":"<p>-p [+|-]flags Modify PE header characteristics. Flags can be prefixed with + to set or - to clear:</p> <ul> <li><code>l</code> - Large address aware (32-bit only)</li> <li><code>r</code> - Removable run from swap</li> <li><code>n</code> - New run from swap</li> <li><code>s</code> - System</li> <li><code>u</code> - Up system only</li> </ul> <p>-d [+|-]flags Modify DLL characteristics. Flags can be prefixed with + to set or - to clear:</p> <ul> <li><code>e</code> - High entropy VA</li> <li><code>d</code> - Dynamic base</li> <li><code>f</code> - Force integrity</li> <li><code>n</code> - NX compatible</li> <li><code>i</code> - No isolation</li> <li><code>s</code> - No SEH</li> <li><code>b</code> - No bind</li> <li><code>a</code> - App container</li> <li><code>w</code> - WDM driver</li> <li><code>c</code> - Control flow guard</li> <li><code>t</code> - Terminal server aware</li> </ul> <p>-s subsystem Set the PE subsystem. Valid values are:</p> <ul> <li>BOOT_APPLICATION</li> <li>CONSOLE</li> <li>EFI_APPLICATION</li> <li>EFI_BOOT_SERVICE_DRIVER</li> <li>EFI_ROM</li> <li>EFI_RUNTIME_DRIVER</li> <li>NATIVE</li> <li>POSIX</li> <li>WINDOWS</li> <li>OS2</li> <li>NATIVE_WINDOWS9X</li> <li>WINDOWS_CE</li> <li>XBOX</li> <li>UNKNOWN</li> </ul> <p>Or a numeric value.</p> <p>-x Dump PE image information to stdout</p> <p>-h Show help information</p>"},{"location":"tools/genpeimg/#authors","title":"AUTHORS","text":"<p>This manual page was written by Christoph Reiter &lt;reiter.christoph@gmail.com&gt;.</p>"},{"location":"tools/widl/","title":"widl(1)","text":""},{"location":"tools/widl/#name","title":"NAME","text":"<p>widl - Wine Interface Definition Language (IDL) compiler</p>"},{"location":"tools/widl/#synopsis","title":"SYNOPSIS","text":"<p>widl [options] IDL_file</p> <p>widl [options] --dlldata-only name1 [name2...]</p>"},{"location":"tools/widl/#description","title":"DESCRIPTION","text":"<p>When no options are used the program will generate a header file, and possibly client and server stubs, proxy and dlldata files, a typelib, and a UUID file, depending on the contents of the IDL file. If any of the options <code>-c</code>, <code>-h</code>, <code>-p</code>, <code>-s</code>, <code>-t</code>, <code>-u</code> or <code>--local-stubs</code> is given, <code>widl</code> will only generate the requested files, and no others. When run with <code>--dlldata-only</code>, widl will only generate a dlldata file, and it will contain a list of the names passed as arguments. Usually the way this file is updated is that each time <code>widl</code> is run, it reads any existing dlldata file, and if necessary regenerates it with the same list of names, but with the present proxy file included.</p> <p>When run without any arguments, <code>widl</code> will print a help message.</p>"},{"location":"tools/widl/#options","title":"OPTIONS","text":""},{"location":"tools/widl/#general-options","title":"General options:","text":"<ul> <li><code>-V</code> - Print version number and exit.</li> <li><code>-o, --output=name</code> - Set the name of the output file. When generating multiple output files, this sets only the base name of the file; the respective output files are then named name.h, name_p.c, etc.</li> <li><code>-b cpu-manufacturer[-kernel]-os</code> - Set the target architecture when cross-compiling. The target specification is in the standard autoconf format as returned by <code>config.sub</code>.</li> </ul>"},{"location":"tools/widl/#header-options","title":"Header options:","text":"<ul> <li><code>-h</code> - Generate header files. The default output filename is infile.h.</li> <li><code>--oldnames</code> - Use old naming conventions.</li> </ul>"},{"location":"tools/widl/#type-library-options","title":"Type library options:","text":"<ul> <li><code>-t</code> - Generate a type library. The default output filename is infile.tlb. If the output file name ends in <code>.res</code>, a binary resource file containing the type library is generated instead.</li> <li><code>-m32, -m64</code> - Generate a Win32 or Win64 type library respectively.</li> </ul>"},{"location":"tools/widl/#uuid-file-options","title":"UUID file options:","text":"<ul> <li><code>-u</code> - Generate a UUID file. The default output filename is infile_i.c.</li> </ul>"},{"location":"tools/widl/#proxystub-generation-options","title":"Proxy/stub generation options:","text":"<ul> <li><code>-c</code> - Generate a client stub file. The default output filename is infile_c.c.</li> <li><code>-Os</code> - Generate inline stubs.</li> <li><code>-Oi</code> - Generate old-style interpreted stubs.</li> <li><code>-Oif, -Oic, -Oicf</code> - Generate new-style fully interpreted stubs.</li> <li><code>-p</code> - Generate a proxy. The default output filename is infile_p.c.</li> <li><code>--prefix-all=prefix</code> - Prefix to put on the name of both client and server stubs.</li> <li><code>--prefix-client=prefix</code> - Prefix to put on the name of client stubs.</li> <li><code>--prefix-server=prefix</code> - Prefix to put on the name of server stubs.</li> <li><code>-s</code> - Generate a server stub file. The default output filename is infile_s.c.</li> <li><code>--win32</code>, <code>--win64</code> - Only generate 32-bit or 64-bit code respectively (the default is to generate both 32-bit and 64-bit versions into the same destination file).</li> <li><code>--rt</code> - Enable additional language extensions for IDL to support WinRT.</li> </ul>"},{"location":"tools/widl/#registration-script-options","title":"Registration script options:","text":"<ul> <li><code>-r</code> - Generate a registration script. The default output filename is infile_r.rgs. If the output file name ends in <code>.res</code>, a binary resource file containing the script is generated instead.</li> </ul>"},{"location":"tools/widl/#dlldata-file-options","title":"Dlldata file options:","text":"<ul> <li><code>--dlldata-only name1 [name2...]</code> - Regenerate the dlldata file from scratch using the specified proxy names. The default output filename is <code>dlldata.c</code>.</li> </ul>"},{"location":"tools/widl/#preprocessor-options","title":"Preprocessor options:","text":"<ul> <li><code>-I path</code> - Add a header search directory to path. Multiple search directories are allowed.</li> <li><code>-D id[=val]</code> - Define preprocessor macro id with value val.</li> <li><code>-E</code> - Preprocess only.</li> <li><code>-N</code> - Do not preprocess input.</li> </ul>"},{"location":"tools/widl/#debug-options","title":"Debug options:","text":"<ul> <li><code>-W</code> - Enable pedantic warnings.</li> <li><code>-d n</code> - Set debug level to the non negative integer n. If prefixed with <code>0x</code>, it will be interpreted as a hexadecimal number. For the meaning of values, see the DEBUG section.</li> </ul>"},{"location":"tools/widl/#miscellaneous-options","title":"Miscellaneous options:","text":"<ul> <li><code>-app_config</code> - Ignored, present for midl compatibility.</li> <li><code>--local-stubs=file</code> - Generate empty stubs for call_as/local methods in an object interface and write them to file.</li> </ul>"},{"location":"tools/widl/#debug","title":"DEBUG","text":"<p>Debug level n is a bitmask with the following meaning: - 0x01 Tell which resource is parsed (verbose mode) - 0x02 Dump internal structures - 0x04 Create a parser trace (yydebug=1) - 0x08 Preprocessor messages - 0x10 Preprocessor lex messages - 0x20 Preprocessor yacc trace</p>"},{"location":"tools/widl/#bugs","title":"BUGS","text":"<p>Bugs can be reported on the Wine bug tracker.</p>"},{"location":"tools/widl/#authors","title":"AUTHORS","text":"<p><code>widl</code> was originally written by Ove K\u00e5ven. It has been improved by Rob Shearman, Dan Hipschman, and others. For a complete list, see the git commit logs. This man page was originally written by Hannu Valtonen and then updated by Dan Hipschman.</p>"},{"location":"tools/widl/#availability","title":"AVAILABILITY","text":"<p><code>widl</code> is part of the Wine distribution, which is available through WineHQ, the Wine development headquarters.</p>"},{"location":"tools/widl/#see-also","title":"SEE ALSO","text":"<p>Wine documentation and support</p>"}]}